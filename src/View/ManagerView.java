package View;

import Controller.AccountCreateController;
import Controller.LoginController;
//import Controller.ManagerController;
import Database.DatabaseConnector;
import Model.LoginModel;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class ManagerView extends javax.swing.JFrame {

//    private ManagerController controller;
//
//    public void setController(ManagerController controller) {
//        this.controller = controller;
//    }
    
    public ManagerView() {
        initComponents();
        //start clock method
        startClock();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();
        pnlBG = new javax.swing.JPanel();
        pnlFooter = new javax.swing.JPanel();
        lblFooter = new javax.swing.JLabel();
        pnlControl = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        pnlDetails = new javax.swing.JPanel();
        btnClear = new javax.swing.JButton();
        lblPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        txtQty = new javax.swing.JTextField();
        txtCategory = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtItemID = new javax.swing.JTextField();
        lblId = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblCat = new javax.swing.JLabel();
        lblQty = new javax.swing.JLabel();
        btnAddNew = new javax.swing.JButton();
        btnBackLogin = new javax.swing.JButton();
        pnlProducts = new javax.swing.JPanel();
        btnCreateAcc = new javax.swing.JButton();
        btnRef = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPro = new javax.swing.JTable();
        lblTHeader = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        pnlHeader = new javax.swing.JPanel();
        lblManager = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Apple iStore - Manager Dashboard");
        setResizable(false);

        pnlBG.setBackground(new java.awt.Color(0, 0, 51));

        pnlFooter.setBackground(new java.awt.Color(0, 102, 204));

        lblFooter.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lblFooter.setForeground(new java.awt.Color(255, 255, 255));
        lblFooter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/apple (2).png"))); // NOI18N
        lblFooter.setText("  Apple Technologies USA");

        javax.swing.GroupLayout pnlFooterLayout = new javax.swing.GroupLayout(pnlFooter);
        pnlFooter.setLayout(pnlFooterLayout);
        pnlFooterLayout.setHorizontalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFooterLayout.createSequentialGroup()
                .addContainerGap(400, Short.MAX_VALUE)
                .addComponent(lblFooter)
                .addGap(371, 371, 371))
        );
        pnlFooterLayout.setVerticalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFooter)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlControl.setBackground(new java.awt.Color(0, 153, 204));

        btnExit.setBackground(new java.awt.Color(0, 153, 204));
        btnExit.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/button.png"))); // NOI18N
        btnExit.setText("Exit");
        btnExit.setBorder(null);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(0, 153, 204));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/sync.png"))); // NOI18N
        btnUpdate.setText("Update Product");
        btnUpdate.setBorder(null);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(0, 153, 204));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/trash.png"))); // NOI18N
        btnDelete.setText("Delete Product");
        btnDelete.setBorder(null);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnView.setBackground(new java.awt.Color(0, 153, 204));
        btnView.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        btnView.setForeground(new java.awt.Color(255, 255, 255));
        btnView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/file.png"))); // NOI18N
        btnView.setText("View Products");
        btnView.setBorder(null);
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        pnlDetails.setBackground(new java.awt.Color(51, 102, 255));

        btnClear.setBackground(new java.awt.Color(51, 102, 255));
        btnClear.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/clear-format.png"))); // NOI18N
        btnClear.setText("Clear");
        btnClear.setBorder(null);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblPrice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPrice.setForeground(new java.awt.Color(255, 255, 255));
        lblPrice.setText("Price ($) :");

        txtPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPriceKeyPressed(evt);
            }
        });

        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQtyKeyPressed(evt);
            }
        });

        txtItemID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemIDKeyPressed(evt);
            }
        });

        lblId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblId.setForeground(new java.awt.Color(255, 255, 255));
        lblId.setText("Item ID :");

        lblName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblName.setForeground(new java.awt.Color(255, 255, 255));
        lblName.setText("Name :");

        lblCat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCat.setForeground(new java.awt.Color(255, 255, 255));
        lblCat.setText("Category :");

        lblQty.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblQty.setForeground(new java.awt.Color(255, 255, 255));
        lblQty.setText("Quantity :");

        btnAddNew.setBackground(new java.awt.Color(51, 102, 255));
        btnAddNew.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        btnAddNew.setForeground(new java.awt.Color(255, 255, 255));
        btnAddNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/add.png"))); // NOI18N
        btnAddNew.setText("Add New Product");
        btnAddNew.setBorder(null);
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDetailsLayout = new javax.swing.GroupLayout(pnlDetails);
        pnlDetails.setLayout(pnlDetailsLayout);
        pnlDetailsLayout.setHorizontalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetailsLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblId, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCat, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblQty, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPrice, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnClear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtName)
                    .addComponent(txtItemID)
                    .addComponent(txtCategory)
                    .addComponent(txtQty)
                    .addComponent(txtPrice)
                    .addComponent(btnAddNew, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );
        pnlDetailsLayout.setVerticalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetailsLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId)
                    .addComponent(txtItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCat)
                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQty))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrice))
                .addGap(18, 18, 18)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddNew, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        btnBackLogin.setBackground(new java.awt.Color(0, 153, 204));
        btnBackLogin.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        btnBackLogin.setForeground(new java.awt.Color(255, 255, 255));
        btnBackLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/previous.png"))); // NOI18N
        btnBackLogin.setText("Back to Login");
        btnBackLogin.setBorder(null);
        btnBackLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlLayout = new javax.swing.GroupLayout(pnlControl);
        pnlControl.setLayout(pnlControlLayout);
        pnlControlLayout.setHorizontalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(pnlDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlControlLayout.createSequentialGroup()
                        .addComponent(btnBackLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlControlLayout.createSequentialGroup()
                        .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );
        pnlControlLayout.setVerticalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlControlLayout.createSequentialGroup()
                        .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBackLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pnlProducts.setBackground(new java.awt.Color(102, 153, 255));

        btnCreateAcc.setBackground(new java.awt.Color(102, 153, 255));
        btnCreateAcc.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        btnCreateAcc.setForeground(new java.awt.Color(255, 255, 255));
        btnCreateAcc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/profile.png"))); // NOI18N
        btnCreateAcc.setText("Create New Account");
        btnCreateAcc.setBorder(null);
        btnCreateAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateAccActionPerformed(evt);
            }
        });

        btnRef.setBackground(new java.awt.Color(102, 153, 255));
        btnRef.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        btnRef.setForeground(new java.awt.Color(255, 255, 255));
        btnRef.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/loading-arrow.png"))); // NOI18N
        btnRef.setText("Refresh");
        btnRef.setBorder(null);
        btnRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(102, 153, 255));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 3, 13)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/search.png"))); // NOI18N
        btnSearch.setBorder(null);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblPro.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        tblPro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ItemID", "Name", "Category", "Quantity", "Price($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblPro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblPro);

        lblTHeader.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblTHeader.setForeground(new java.awt.Color(204, 255, 255));
        lblTHeader.setText("Product Details Table :");

        lblSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblSearch.setForeground(new java.awt.Color(255, 255, 255));
        lblSearch.setText("Search Products :");

        javax.swing.GroupLayout pnlProductsLayout = new javax.swing.GroupLayout(pnlProducts);
        pnlProducts.setLayout(pnlProductsLayout);
        pnlProductsLayout.setHorizontalGroup(
            pnlProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProductsLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(pnlProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTHeader)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 898, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlProductsLayout.createSequentialGroup()
                        .addComponent(btnCreateAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRef, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        pnlProductsLayout.setVerticalGroup(
            pnlProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProductsLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pnlProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCreateAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRef, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSearch)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pnlHeader.setBackground(new java.awt.Color(0, 102, 204));
        pnlHeader.setPreferredSize(new java.awt.Dimension(604, 54));

        lblManager.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblManager.setForeground(new java.awt.Color(255, 255, 255));
        lblManager.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/management.png"))); // NOI18N
        lblManager.setText("  THE ISTORE - MANAGER DASHBOARD");

        lblTime.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTime.setForeground(new java.awt.Color(255, 255, 255));

        lblDate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlHeaderLayout = new javax.swing.GroupLayout(pnlHeader);
        pnlHeader.setLayout(pnlHeaderLayout);
        pnlHeaderLayout.setHorizontalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblManager)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        pnlHeaderLayout.setVerticalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHeaderLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblManager, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout pnlBGLayout = new javax.swing.GroupLayout(pnlBG);
        pnlBG.setLayout(pnlBGLayout);
        pnlBGLayout.setHorizontalGroup(
            pnlBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBGLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlProducts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlFooter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 950, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBGLayout.setVerticalGroup(
            pnlBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBGLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName("iStore - Manager Dashboard");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Getters for text fields
    public String getSearch() {
        return txtSearch.getText();
    }

    public String getItemID() {
        return txtItemID.getText();
    }

    public String getitemName() {
        return txtName.getText();
    }

    public String getCat() {
        return txtCategory.getText();
    }

    public String getQty() {
        return txtQty.getText();
    }

    public String getPrice() {
        return txtPrice.getText();
    }

    public TableModel getTblPro() {
        return tblPro.getModel();
    }

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        //controller.handleSearch();
        
        //run the 'performSearch' method
        performSearch();
    }

    private void performSearch() {
        try {
            if (txtSearch.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Search Text Fiels is Empty!\nTry Again!");
            } else {
                Class.forName("com.mysql.cj.jdbc.Driver");
                try (Connection con = DatabaseConnector.connect()) {
                    //making the sql command
                    String sql = "SELECT * FROM products WHERE name LIKE ? OR itemid LIKE ? OR category LIKE ?";
                    try (PreparedStatement ps = con.prepareStatement(sql)) {
                        ps.setString(1, "%" + txtSearch.getText() + "%");
                        ps.setString(2, "%" + txtSearch.getText() + "%");
                        ps.setString(3, "%" + txtSearch.getText() + "%");

                        //execute the sql command
                        ResultSet rs = ps.executeQuery();

                        DefaultTableModel tblModel = (DefaultTableModel) tblPro.getModel();
                        tblModel.setRowCount(0);

                        while (rs.next()) {
                            String id = String.valueOf(rs.getInt("ItemID"));
                            String name = rs.getString("Name");
                            String category = rs.getString("Category");
                            String qty = rs.getString("qty");
                            String price = rs.getString("Price");

                            //equals string data to atring array
                            String tbData[] = {id, name, category, qty, price};
                            tblModel.addRow(tbData);
                        }
                    }
                }
            }
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, "An Error Occurred While Searching!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCreateAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateAccActionPerformed
        AccountCreateView accountcreate = new AccountCreateView();
        accountcreate.setVisible(true);
        AccountCreateController accountcontroller = new AccountCreateController(accountcreate);
        accountcreate.setController(accountcontroller);
        this.dispose();
    }//GEN-LAST:event_btnCreateAccActionPerformed

    private void btnBackLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackLoginActionPerformed
        LoginView login = new LoginView();
        login.setVisible(true);

        LoginModel loginModel = new LoginModel();

        LoginController logincontroller = new LoginController(login, loginModel);
        logincontroller.initializeController();
        this.dispose();
    }//GEN-LAST:event_btnBackLoginActionPerformed

    //Error handling for text field txtItemID
    private void txtItemIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemIDKeyPressed
        char c = evt.getKeyChar();
        if (Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE)) {
            txtItemID.setEditable(true);
        } else {
            txtItemID.setEditable(false);
            JOptionPane.showMessageDialog(this, "ItemID Cannot be a Letter or Symbol,\nPlease Enter Numbers Only!");
        }
    }//GEN-LAST:event_txtItemIDKeyPressed

    //Error handling for text field txtQty
    private void txtQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyPressed
        char c = evt.getKeyChar();
        if (Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE)) {
            txtQty.setEditable(true);
        } else {
            txtQty.setEditable(false);
            JOptionPane.showMessageDialog(this, "Quantity Cannot be a Letter or Symbol,\nPlease Enter Numbers Only!");
        }
    }//GEN-LAST:event_txtQtyKeyPressed

    //Error handling for text field item id
    private void txtPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceKeyPressed
        char c = evt.getKeyChar();
        if (Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_PERIOD) || (c == KeyEvent.VK_DECIMAL)) {
            txtPrice.setEditable(true);
        } else {
            txtPrice.setEditable(false);
            JOptionPane.showMessageDialog(this, "Price Cannot be a Letter or Symbol,\nPlease Enter Numbers Only!");
        }
    }//GEN-LAST:event_txtPriceKeyPressed

    //clear text boxes
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtItemID.setText("");
        txtName.setText("");
        txtCategory.setText("");
        txtQty.setText("");
        txtPrice.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        if (!dataLoaded) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                try (Connection con = DatabaseConnector.connect()) {
                    Statement st = con.createStatement();
                    String sql = "select * from products";
                    ResultSet rs = st.executeQuery(sql);

                    while (rs.next()) {
                        //get values from text boxes
                        String id = String.valueOf(rs.getInt("itemid"));
                        String name = rs.getString("name");
                        String category = rs.getString("category");
                        String qty = rs.getString("qty");
                        String price = rs.getString("price");

                        String tbData[] = {id, name, category, qty, price};

                        DefaultTableModel tblModel = (DefaultTableModel) tblPro.getModel();
                        tblModel.addRow(tbData);
                    }
                }
                dataLoaded = true;
            } catch (ClassNotFoundException | SQLException e) {
                System.out.println(e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Products Are Already Loaded!");
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel) tblPro.getModel();
        int selectedRow = tblPro.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int id = Integer.parseInt(tblModel.getValueAt(selectedRow, 0).toString());
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DatabaseConnector.connect();

            try (Statement st = con.createStatement()) {
                int userChoice = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected row?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
                if (userChoice == JOptionPane.YES_OPTION) {
                    try (PreparedStatement ps = con.prepareStatement("DELETE FROM products WHERE itemid = ?")) {
                        ps.setInt(1, id);
                        int rowsAffected = ps.executeUpdate();
                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(this, "Selected product deleted successfully!");
                            tblModel.removeRow(selectedRow);
                        } else {
                            JOptionPane.showMessageDialog(this, "Failed to delete the selected product.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            } catch (Exception e) {
                System.out.println("Error Occured while Deleting " + e);
            }
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            //this message showed and 'droped the foreign key' in saleitems table
            JOptionPane.showMessageDialog(this, "An error occurred while delete the selected product!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRowIndex = tblPro.getSelectedRow();

        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please Select a Row to Update!");
            return;
        }

        int id = Integer.parseInt(tblPro.getValueAt(selectedRowIndex, 0).toString());

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (Connection con = DatabaseConnector.connect()) {
                if (isItemIDExists(con, txtItemID.getText(), id)) {
                    JOptionPane.showMessageDialog(this, "ItemID is Already Exists!\nPlease Add The Correct ItemID!");
                } else {
                    String updateQuery = "UPDATE products SET itemid=?, name=?, category=?, qty=?, price=? WHERE itemid=?";
                    try (PreparedStatement ps = con.prepareStatement(updateQuery)) {

                        ps.setString(1, txtItemID.getText());
                        ps.setString(2, txtName.getText());
                        ps.setString(3, txtCategory.getText());
                        ps.setString(4, txtQty.getText());
                        ps.setString(5, txtPrice.getText());
                        ps.setInt(6, id);

                        int rowsAffected = ps.executeUpdate();
                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(this, "Product Updated Successfully!");

                            DefaultTableModel tblModel = (DefaultTableModel) tblPro.getModel();

                            tblModel.setValueAt(txtItemID.getText(), selectedRowIndex, 0);
                            tblModel.setValueAt(txtName.getText(), selectedRowIndex, 1);
                            tblModel.setValueAt(txtCategory.getText(), selectedRowIndex, 2);
                            tblModel.setValueAt(txtQty.getText(), selectedRowIndex, 3);
                            tblModel.setValueAt(txtPrice.getText(), selectedRowIndex, 4);
                        } else {
                            JOptionPane.showMessageDialog(this, "Rows Aren't updated!\nPlease Check Inputs!");
                        }
                    }
                }
            }
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, "An Error Occurred While Updating The Product!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    //btn update id number checker
    private boolean isItemIDExists(Connection con, String newItemID, int currentID) throws SQLException {
        String checkQuery = "SELECT COUNT(*) FROM products WHERE itemid = ? AND itemid != ?";
        try (PreparedStatement ps = con.prepareStatement(checkQuery)) {
            ps.setString(1, newItemID);
            ps.setInt(2, currentID);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int count = rs.getInt(1);
                    return count > 0;
                }
            }
        }
        return false;
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void tblProMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProMouseClicked
        DefaultTableModel tblModel = (DefaultTableModel) tblPro.getModel();

        int selectedRow = tblPro.getSelectedRow();
        if (selectedRow == -1) {
            return;
        }

        int id = Integer.parseInt(tblModel.getValueAt(selectedRow, 0).toString());

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (Connection con = DatabaseConnector.connect(); Statement st = con.createStatement(); ResultSet res = st.executeQuery("SELECT * FROM products WHERE itemid=" + id)) {

                if (res.next()) {
                    txtItemID.setText(Integer.toString(res.getInt("itemid")));
                    txtName.setText(res.getString("name"));
                    txtCategory.setText(res.getString("category"));
                    txtQty.setText(res.getString("qty"));
                    txtPrice.setText(res.getString("price"));
                } else {
                    JOptionPane.showMessageDialog(this, "No data found for the selected product ID.", "No Data Found", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, "An error occurred while retrieving product data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tblProMouseClicked

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        if (txtItemID.getText().equals("") || txtName.getText().equals("") || txtCategory.getText().equals("") || txtQty.getText().equals("") || txtPrice.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Some Fields Are Empty!\nCheck The Fields!");
        } else {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                try (Connection con = DatabaseConnector.connect()) {
                    if (isItemIDExists(con, txtItemID.getText())) {
                        JOptionPane.showMessageDialog(this, "ItemID Already Exists!\nPlease Add The Correct ID!");
                    } else if (isProductNameExists(con, txtName.getText())) {
                        JOptionPane.showMessageDialog(this, "Product Name Already Exists!\nPlease Add The Correct Name!");
                    } else {
                        Statement st = con.createStatement();

                        String itemid = txtItemID.getText();
                        String name = txtName.getText();
                        String category = txtCategory.getText();
                        String qty = txtQty.getText();
                        String price = txtPrice.getText();

                        boolean b = st.execute("insert into products(itemid, name, category, qty, price) values('" + itemid + "','" + name + "','" + category + "','" + qty + "','" + price + "')");
                        if (!b) {
                            JOptionPane.showMessageDialog(this, "Product Added Successfully!");

                            DefaultTableModel tblModel = (DefaultTableModel) tblPro.getModel();
                            String tbData[] = {itemid, name, category, qty, price};
                            tblModel.addRow(tbData);
                        } else {
                            JOptionPane.showMessageDialog(this, "Error! Try Again!");
                        }
                    }
                }
            } catch (HeadlessException | ClassNotFoundException | SQLException e) {
                JOptionPane.showMessageDialog(this, e);
            }
        }
    }

    //btn add new id number checker
    private boolean isItemIDExists(Connection con, String itemID) throws SQLException {
        String checkQuery = "SELECT COUNT(*) FROM products WHERE itemid = ?";
        try (PreparedStatement ps = con.prepareStatement(checkQuery)) {
            ps.setString(1, itemID);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int count = rs.getInt(1);
                    return count > 0;
                }
            }
        }
        return false;
    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefActionPerformed
        ManagerView manager = new ManagerView();
        manager.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRefActionPerformed

    //Encapsulation
    private boolean dataLoaded = false;

    private boolean isProductNameExists(Connection con, String productName) throws SQLException {
        String checkQuery = "SELECT COUNT(*) FROM products WHERE name = ?";
        try (PreparedStatement ps = con.prepareStatement(checkQuery)) {
            ps.setString(1, productName);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int count = rs.getInt(1);
                    return count > 0;
                }
            }
        }
        return false;
    }

    //Encapsulation
    private void startClock() {
        Timer timer = new Timer(1000, (ActionEvent e) -> {
            updateDateTime();
        });
        timer.start();
    }

    //Encapsulation
    private void updateDateTime() {
        //LocalTime currentTime = LocalTime.now();

        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
        String formattedTime = timeFormat.format(new Date());

        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        String formattedDate = dateFormat.format(new Date());

        lblTime.setText("Time: " + formattedTime);
        lblDate.setText("Date: " + formattedDate);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ManagerView().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnBackLogin;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreateAcc;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRef;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lblCat;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblFooter;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblManager;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblQty;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblTHeader;
    private javax.swing.JLabel lblTime;
    private javax.swing.JPanel pnlBG;
    private javax.swing.JPanel pnlControl;
    private javax.swing.JPanel pnlDetails;
    private javax.swing.JPanel pnlFooter;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlProducts;
    private javax.swing.JTable tblPro;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtItemID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
